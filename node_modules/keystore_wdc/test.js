const KeyStore = require('./keystore');
const ks = new KeyStore();

let fromPubkeyStr = "833fd9fda2273787fbbdb789374e1fd8f431c6062383428eb3b0030f58a3a11f";
let prikeyStr = "b77a8a6b5917549977a84af8d4b74a623797db1194a3b8d3e178691999ed7e54";
let nonceNum = 1;


let payload_asset160hash = "0000000000000000000000000000000000000000";
let payload_m = 2;
let payload_n = 2;
let payload_pubkeyHashs = "f12a4c8bbffd85eff63315af85639af75c7c70e8,8ecffa68905f574a3252770c32d39c7032106e58";
let fromPubkeyStrs = "833fd9fda2273787fbbdb789374e1fd8f431c6062383428eb3b0030f58a3a11f,be62a2da5e0731ebd26faeb17f9d588611fa3bad4d0723c90e54f54521cfd621";
let prikeyStrs = "b77a8a6b5917549977a84af8d4b74a623797db1194a3b8d3e178691999ed7e54,b46cf4a0c4372a80b494e482a325f4173eb8ece330963c8537a7f826affdc388";



function test_multipleForRuleFirst(fromPubkeyStr,nonceNum,prikeyStr,payload_asset160hash,payload_m,payload_n,payload_pubkeyHashs,fromPubkeyStrs,prikeyStrs){
    let payload_pubkeyHashsArray = payload_pubkeyHashs.split(",");
    let payload_pubkeyHashasBytesArray = new Array();
    for(var i=0;i<payload_pubkeyHashsArray.length;i++){
        payload_pubkeyHashasBytesArray.push(Buffer.from(payload_pubkeyHashsArray[i],'hex'));
    }
    let fromPubkeysArray = fromPubkeyStrs.split(",");
    let prikeysArray = prikeyStrs.split(",");
    //构建
    let multRule = ks.CreateMultipleForRuleFirst(fromPubkeyStr,nonceNum,prikeyStr,payload_asset160hash,payload_m,payload_n,payload_pubkeyHashasBytesArray);
    //其他人签名
    let signTx = multRule.signTransaction;
    let signAll = "";
    for(var i=1;i<prikeysArray.length;i++){
        let otherMult = ks.CreateMultipleToDeployforRuleOther(multRule.sign,multRule.rawTransaction,fromPubkeyStr,fromPubkeysArray[i],prikeysArray[i]);
        signAll = ks.CreateMultipleForRuleSplice(signTx,otherMult.fromPubkeyStr,otherMult.sign,prikeyStr);
        signTx = signAll.allsignTransaction;
 
    }  
    
    console.log(signAll.allsignTransaction);
    console.log("-------------------------");
    console.log(signAll.txHash);
    return {
        "transaction":signAll.allsignTransaction
    };
}

test_multipleForRuleFirst(fromPubkeyStr,nonceNum,prikeyStr,payload_asset160hash,payload_m,payload_n,payload_pubkeyHashs,fromPubkeyStrs,prikeyStrs);
